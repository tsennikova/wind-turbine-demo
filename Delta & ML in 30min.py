# Databricks notebook source
# MAGIC %md-sandbox
# MAGIC # Wind Turbine Power Prediction
# MAGIC 
# MAGIC In this example, we demonstrate turbine power prediction.
# MAGIC 
# MAGIC <img src="https://raw.githubusercontent.com/tsennikova/databricks-demo/main/Wind%20Turbine%20Demo.png" width = "800" />
# MAGIC 
# MAGIC <p><b>Usecase:</b></p>
# MAGIC 
# MAGIC <p>Wind Turbines, Scada Systems measure and save data's like wind speed, wind direction, generated power etc. for 10 minutes intervals. In this use case we will predict the amount of power generated by wind turbines based on the wether conditions: speed and the direction of the wind. We will build a dashbaord that will be used for power management and capacity planning.</p>
# MAGIC 
# MAGIC <p><b>Demo Objective:</b></p>
# MAGIC 
# MAGIC <ol>
# MAGIC <li> Show cluster management capability</li>
# MAGIC <li> Show how to track ML model parameters, metrics, tags and artifacts  </li>
# MAGIC <li> Show Databricks platform seamless collaboration capability</li>
# MAGIC <li> Demonstrate the simplicity of managing multiple model runs</li>
# MAGIC <li> Show model deployment and serving via Rest API and batch</li>
# MAGIC <li> Show model versioning and state transition from Staging to Production</li>
# MAGIC <li> Show building dashboards in SQL Analytics</li>
# MAGIC <li> Show connection to Tableau</li>
# MAGIC </ol>
# MAGIC 
# MAGIC 
# MAGIC <b>Content</b><p>
# MAGIC The data's in the file are:</p>
# MAGIC 
# MAGIC <li>Date/Time (for 10 minutes intervals)</li>
# MAGIC <li>LV ActivePower (kW): The power generated by the turbine for that moment</li>
# MAGIC <li>Wind Speed (m/s): The wind speed at the hub height of the turbine (the wind speed that turbine use for electricity generation)</li>
# MAGIC <li>TheoreticalPowerCurve (KWh): The theoretical power values that the turbine generates with that wind speed which is given by the turbine manufacturer</li>
# MAGIC <li>Wind Direction (Â°): The wind direction at the hub height of the turbine (wind turbines turn to this direction automaticly)</li>
# MAGIC 
# MAGIC 
# MAGIC <p>We will use Gradient Boosted Tree Regression to predict Active Power</p>
# MAGIC <p>
# MAGIC Once the model is trained, we'll use MFLow to track its performance and save it in the registry to deploy it in production</p>
# MAGIC 
# MAGIC 
# MAGIC 
# MAGIC *Data Source Acknowledgement: This Data Source Provided By Kaggle*
# MAGIC 
# MAGIC *https://www.kaggle.com/berkerisen/wind-turbine-scada-dataset*

# COMMAND ----------

# DBTITLE 1,Cross Notebook Reference
# MAGIC %run "./data_and_ml_utils/helpers"

# COMMAND ----------

# MAGIC %md
# MAGIC # Part 1 : Delta & ML End-to-End in 30 minutes

# COMMAND ----------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import mlflow.xgboost
import xgboost as xgb
from xgboost import XGBRegressor
from windrose import WindroseAxes

sns.set(rc={'figure.figsize':(11, 4)})

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Load and explore the data

# COMMAND ----------

bronzeDF = spark.read \
                .format(file_type) \
                .option("header","true") \
                .option("delimiter", ';') \
                .schema("Date string, LV_Active_Power double, Wind_Speed double, Theoretical_Power_Curve double, Wind_Direction double") \
                .load("/mnt/tania/wind-turbine-demo/wind_turbine_dataset.csv") 
                  

# COMMAND ----------

display(bronzeDF)

# COMMAND ----------

bronzeDF.createOrReplaceTempView("wind_turbine_bronze_tw")

# COMMAND ----------

# DBTITLE 1,Create Bronze Table
# MAGIC %sql
# MAGIC DROP TABLE IF EXISTS tania.wind_turbine_bronze;
# MAGIC 
# MAGIC CREATE OR REPLACE TABLE tania.wind_turbine_bronze
# MAGIC USING Delta
# MAGIC LOCATION "/mnt/tania/wind-turbine-demo/wind_turbine_bronze"
# MAGIC AS SELECT * FROM wind_turbine_bronze_tw

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT * FROM tania.wind_turbine_bronze

# COMMAND ----------

spark.conf.set("spark.sql.legacy.timeParserPolicy","LEGACY")

# COMMAND ----------

# MAGIC %md
# MAGIC ### Create features for machine learning

# COMMAND ----------

from pyspark.sql.functions import to_timestamp
from pyspark.sql.functions import month, hour
from pyspark.sql.types import IntegerType

silverDF = spark.read.table('wind_turbine_bronze_tw')

silverDF = silverDF.withColumn("Date", to_timestamp(silverDF.Date, 'dd MM yyyy HH:mm'))
silverDF = silverDF.withColumn("Month", month(silverDF.Date).cast(IntegerType()))
silverDF = silverDF.withColumn("Hour", hour(silverDF.Date).cast(IntegerType()))
display(silverDF)

# COMMAND ----------

space = "                "

# COMMAND ----------

# DBTITLE 1,Widget Setup
dbutils.widgets.removeAll()
dbutils.widgets.text('Wind Speed', '1')
dbutils.widgets.dropdown('Month', '1', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'])
widget_speed = int(dbutils.widgets.get('Wind Speed'))
widget_month = str(dbutils.widgets.get('Month'))

# COMMAND ----------

# DBTITLE 1,Demonstrate work of the widget
from pyspark.sql.functions import col
print(space, "Month: ", widget_month, "Min Wind Speed: ", widget_speed)
display(silverDF.filter((col("Month") == widget_month)).filter((col("Wind_Speed").cast(IntegerType()) > widget_speed)))

# COMMAND ----------

# MAGIC %md
# MAGIC ### Exploratory data analysis

# COMMAND ----------

pd.options.display.float_format = '{:.2f}'.format
silverDF.select('Wind_Speed', 'Theoretical_Power_Curve', 'LV_Active_Power', 'Wind_Direction').toPandas().describe()

# COMMAND ----------

# DBTITLE 1,Average power production per month
display(silverDF)

# COMMAND ----------

# DBTITLE 1,Average power production per hour
display(silverDF)

# COMMAND ----------

# DBTITLE 1,Correlation between the wind speed, wind direction and power production
silver_pd = silverDF.toPandas()
columns = ['LV_Active_Power', 'Wind_Speed', 'Theoretical_Power_Curve', 'Wind_Direction']
display(silver_pd[columns].corr())
sns.pairplot(silver_pd[columns], markers='*');

# COMMAND ----------

# MAGIC %md
# MAGIC Wind speed and power production is highly correlated.
# MAGIC We can see there are lower level power production for some wind directions.

# COMMAND ----------

# DBTITLE 1,Power production for different wind directions and speeds
# Creating the polar diagram
from math import radians


plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
# Inside circles are the wind speed and marker color and size represents the amount of power production
sns.scatterplot(x=[radians(x) for x in silver_pd['Wind_Direction']], 
                y=silver_pd['Wind_Speed'],
                size=silver_pd['LV_Active_Power'],
                hue=silver_pd['LV_Active_Power'],
                alpha=0.7, legend=None)

# Setting the polar diagram's top represents the North 
ax.set_theta_zero_location('N')
# Setting -1 to start the wind direction clockwise
ax.set_theta_direction(-1)
# Setting wind speed labels in a better position to see
ax.set_rlabel_position(110)
plt.title('Wind Speed - Wind Direction - Power Production Diagram')
plt.ylabel(None);

# COMMAND ----------

# MAGIC %md
# MAGIC We can see that the wind turbine produces more power if the wind blows from the directions between 000-090 and 180-225 degrees.

# COMMAND ----------

# DBTITLE 1,Manufacturer's theoretical power production curve vs. real production 
plt.figure(figsize=(10,6))
sns.scatterplot(x='Wind_Speed', y='LV_Active_Power', color='gray', label='Real Production', alpha=0.5, data=silver_pd)
sns.lineplot(x='Wind_Speed', y='Theoretical_Power_Curve', color='blue', label='Theoritical Production', data=silver_pd)
plt.title('Wind Speed and Power Production Chart')
plt.ylabel('Power Production (kw)');

# COMMAND ----------

# MAGIC %md
# MAGIC ### Data filtering

# COMMAND ----------

# Excluding the observations meeting the filter criterias 
silverDF = silverDF.filter(~((silverDF['LV_Active_Power'] == 0)
                            & (silverDF['Theoretical_Power_Curve'] != 0)
                            & (silverDF['Wind_Speed'] > 3)))

# COMMAND ----------

# DBTITLE 1,Outliers analysis
columns = ['Wind_Speed', 'Wind_Direction', 'Theoretical_Power_Curve', 'LV_Active_Power']
i=1
plt.figure(figsize=(20,3))
for each in columns:
    df = silverDF.select(each).toPandas()
    plt.subplot(1,4,i)
    sns.boxplot(df[each])
    plt.title(each)
    i += 1

# COMMAND ----------

from pyspark.sql import functions as F
silverDF = silverDF.withColumn('Wind_Speed', 
                               F.when(F.col('Wind_Speed') > 19, 19)
                               .otherwise(F.col('Wind_Speed')))

# COMMAND ----------

silverDF.createOrReplaceTempView("wind_turbine_silver_tw")

# COMMAND ----------

# DBTITLE 1,Create silver table for machine learning
# MAGIC %sql
# MAGIC DROP TABLE IF EXISTS tania.wind_turbine_silver;
# MAGIC 
# MAGIC CREATE OR REPLACE TABLE tania.wind_turbine_silver
# MAGIC USING Delta
# MAGIC LOCATION "/mnt/tania/wind-turbine-demo/wind_turbine_silver"
# MAGIC AS SELECT * FROM wind_turbine_silver_tw

# COMMAND ----------

# DBTITLE 1,Split the data for training
train_x, test_x, train_y, test_y, baseline_train, baseline_test = train_test_split(silverDF.select('Month', 'Hour','Wind_Speed', 'Wind_Direction').toPandas(),
                                                    silverDF.select("LV_Active_Power").toPandas().values.ravel(), 
                                                    silverDF.select("Theoretical_Power_Curve").toPandas(), random_state=42)
train = xgb.DMatrix(data=train_x, label=train_y)
test = xgb.DMatrix(data=test_x, label=test_y)

# COMMAND ----------

# MAGIC %md
# MAGIC ##2. Traing a simple model with arbitrary parameters

# COMMAND ----------

def train_model(params):
  with mlflow.start_run(nested=True) as run:
   
    booster = xgb.train(params=params, dtrain=train, num_boost_round=1000,\
                        evals=[(test, "test")], early_stopping_rounds=10, verbose_eval=100)   
    predictions_test = booster.predict(test)
    
    mae = mean_absolute_error(test_y, predictions_test)
    mse = mean_squared_error(test_y, predictions_test)
    r2 = r2_score (test_y, predictions_test)
    
    mlflow.log_metric('mae', mae)
    mlflow.log_metric('mse', mse)
    mlflow.log_metric('r2', r2)
    
    model_uri = f"runs:/{run.info.run_uuid}/model" # model identifier representing this run!
    return { "model_uri":model_uri, 'loss': -1*r2, 'booster': booster.attributes()}

# COMMAND ----------

mlflow.xgboost.autolog()
result = train_model(
  {
    'learning_rate': 0.4,
     'max_depth': 65,
     'min_child_weight': 0.6,
     'reg_alpha': 0.15,
     'reg_lambda': 0.2,
     'objective': 'reg:squarederror'
  }
)
r2 = -1*result['loss']
r2

# COMMAND ----------

# MAGIC %md
# MAGIC #### Run predictions on python [Single node]

# COMMAND ----------

def predict_python(model_uri, data):  
  model = mlflow.pyfunc.load_model(model_uri)
  predictions = model.predict(data)
  df = pd.DataFrame(predictions,columns=["prediction"])
  return df
preds_df = predict_python(result["model_uri"],test_x)
preds_df.head(5)

# COMMAND ----------

# DBTITLE 1,Evaluate prediction
# Compining dataframes to compare
frames = [test_x.reset_index(drop=True), baseline_test.reset_index(drop=True), preds_df.reset_index(drop=True), pd.Series(test_y).rename("Real_Power")]
goldDF = pd.concat(frames, axis=1)

# Visualizing real, theoritical and predicted power production
plt.figure(figsize=(10,7))
sns.scatterplot(x='Wind_Speed', y="Real_Power", alpha=0.5, label= 'Real Power', data=goldDF)
sns.scatterplot(x='Wind_Speed', y='prediction', alpha=0.7, label='Predicted Power', marker='o', data=goldDF)
sns.lineplot(x='Wind_Speed', y='Theoretical_Power_Curve', label='Theoritical Power',color='purple', data=goldDF)
plt.title('Wind Turbine Power Production Prediction')
plt.ylabel('Power Production (kw)')
plt.legend();

# COMMAND ----------

# MAGIC %md
# MAGIC #### Run predictions on spark [Multi node]

# COMMAND ----------

def predict_spark(model_uri, data):  
  input = spark.createDataFrame(data)
  udf = mlflow.pyfunc.spark_udf(spark, model_uri)
  predictions = input.withColumn("predictions", udf(*input.columns)).select("predictions")
  return predictions

display(predict_spark(result["model_uri"],test_x))

# COMMAND ----------

# MAGIC %md
# MAGIC ##3. Deploy the model and use the Rest API to run some predictions

# COMMAND ----------

# MAGIC %md
# MAGIC #### Please follow the recorded snippet bellow to register a model
# MAGIC 
# MAGIC <img src = "https://drive.google.com/uc?export=download&id=1QN2GxApZzfJcLGf_QDAdIWDPcqfVTbKG" width = "600">

# COMMAND ----------

# MAGIC %md
# MAGIC #### Predict from model registry

# COMMAND ----------

model_registry_name = "wind_turbine_power_prediction" # Write the model name you created here. 

# COMMAND ----------

# DBTITLE 1,Run batch prediction from Staging version
model_uri = f"models:/{model_registry_name}/staging"
display(predict_python(model_uri,test_x))

# COMMAND ----------

# DBTITLE 1,Run batch prediction from Staging specific version
model_uri = f"models:/{model_registry_name}/1"
display(predict_python(model_uri,test_x))

# COMMAND ----------

# MAGIC %md
# MAGIC ### After model Serving is loaded. you can start serving.
# MAGIC 
# MAGIC <img src = "https://drive.google.com/uc?export=download&id=1pxhFSfd_yVytBuNrY_u7femPOXuZVj1M" width="600">
# MAGIC 
# MAGIC > Try using this sample : 
# MAGIC 
# MAGIC 'Month', 'Hour', 'Wind_Speed', 'Wind_Direction'
# MAGIC ``` 
# MAGIC [
# MAGIC   {
# MAGIC     "Month": 9,
# MAGIC     "Hour": 1,
# MAGIC     "Wind_Speed": 6.19,
# MAGIC     "Wind_Direction": 199.5
# MAGIC   }
# MAGIC ]```

# COMMAND ----------

# DBTITLE 1,Create golden table for further BI analysis
spark.createDataFrame(goldDF).write.format("delta").mode("overwrite").saveAsTable("tania.wind_turbine_gold")
spark.createDataFrame(goldDF).write.format("delta").mode("overwrite").save("/mnt/tania/wind-turbine-demo/wind_turbine_gold")

# COMMAND ----------

# MAGIC %md 
# MAGIC ##4. Our data is ready! Let's create a dashboard to monitor our Turbine plant
# MAGIC 
# MAGIC https://e2-demo-field-eng.cloud.databricks.com/sql/dashboards/9978ea93-9420-4f28-9f14-0c7810f4fce8-wind-turbine-dashboard?o=1444828305810485

# COMMAND ----------

# MAGIC %md-sandbox
# MAGIC # Wind Turbine Power Prediction Wrap-Up
# MAGIC 
# MAGIC <img src="https://raw.githubusercontent.com/tsennikova/databricks-demo/main/Wind%20Turbine%20Demo.png" width = "800" />
# MAGIC 
# MAGIC <p><b>Usecase:</b></p>
# MAGIC 
# MAGIC <p>Wind Turbines, Scada Systems measure and save data like wind speed, wind direction, generated power etc. for 10 minutes intervals. In this use case we will predict the amount of power generated by wind turbines based on the wether conditions: speed and the direction of the wind. We will build a dashbaord that will be used for power management and capacity planning.</p>

# COMMAND ----------

# DBTITLE 1,Clean up Delta Tables
# dbutils.fs.rm("/mnt/tania/wind-turbine-demo/wind_turbine_bronze", True)
# dbutils.fs.rm("/mnt/tania/wind-turbine-demo/wind_turbine_silver", True)
# dbutils.fs.rm("/mnt/tania/wind-turbine-demo/wind_turbine_gold", True)

# COMMAND ----------

# MAGIC %md new markdpwn comment

# COMMAND ----------

bronzeDF.count()

# COMMAND ----------


